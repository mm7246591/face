{"version":3,"sources":["image/nose.png","view/PlayerOne.jsx","view/PlayerTwo.jsx","view/Face.jsx","view/DetectPlayerOne.jsx","view/DetectPlayerTwo.jsx","App.jsx","view/reportWebVitals.js","index.js"],"names":["module","exports","DrawPlayerOne","useEffect","socket","WebSocket","onmessage","event","data","text","then","txt","a","information","split","PlayerInformation","PlayerOne","isDetct","MouseX","parseInt","MouseY","UsingWebSocket","Phaser","Game","type","AUTO","width","height","backgroundColor","transparent","physics","default","arcade","debug","scene","preload","create","update","parent","nose","PlayerMouseEasing","this","load","image","bigNose","add","setPosition","setScale","setVisible","id","style","position","marginLeft","marginRight","bottom","right","zIndex","DrawPlayerTwo","PlayerTwo","left","Face","player","webcamRef","useRef","useState","devices","setDevices","runFacedetection","blazeface","model","setInterval","detect","current","video","readyState","videoWidth","videoHeight","estimateFaces","prediction","length","send","landmarks","handleDevices","useCallback","mediaDevices","filter","kind","navigator","enumerateDevices","map","ref","videoConstraints","deviceId","mirrored","DetectPlayerOne","App","key","uuidv4","path","element","DetectPlayerTwo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b51f2087.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nose.6acc99a2.png\";","import React, { useState,useEffect } from 'react'\r\nimport Phaser from 'phaser'\r\nimport bigNose from '../image/nose.png'\r\n\r\nconst DrawPlayerOne = () => {\r\n\r\n  useEffect(() => {\r\n    UsingWebSocket()\r\n    new Phaser.Game({\r\n      type: Phaser.AUTO,\r\n      width: 640,\r\n      height: 480,\r\n      backgroundColor: '#fff',\r\n      transparent: true,\r\n      physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n          debug: true\r\n        }\r\n      },\r\n      scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n      },\r\n      parent: 'container'\r\n    })\r\n  }, [])\r\n  //Player Mouse\r\n  const PlayerInformation = {\r\n    PlayerOne: {\r\n      MouseX: 400,\r\n      MouseY: 400,\r\n      isDetct:false,\r\n    },\r\n    PlayerMouseEasing: 0.1\r\n  }\r\n\r\n  let nose\r\n\r\n  function preload () {\r\n    this.load.image('nose', bigNose)\r\n  }\r\n  function create () {\r\n    nose = this.add\r\n      .image(0, 0, 'nose')\r\n      .setPosition(0, 0)\r\n      .setScale(0.02, 0.02)\r\n      .setVisible(false)\r\n  }\r\n\r\n  function update () {\r\n    if(PlayerInformation.PlayerOne.isDetct){\r\n      nose.setPosition(PlayerInformation.PlayerOne.MouseX, PlayerInformation.PlayerOne.MouseY).setVisible(true)\r\n    }\r\n  }\r\n\r\n  function UsingWebSocket () {\r\n   let socket = new WebSocket(\"ws://localhost:3000\");\r\n    socket.onmessage = (event) => {\r\n      event.data.text().then(async(txt) => {\r\n        let information = txt.split(\",\");\r\n        if (information[0] === \"one\") {\r\n          PlayerInformation.PlayerOne.isDetct=true\r\n          PlayerInformation.PlayerOne.MouseX=parseInt(information[1])\r\n          PlayerInformation.PlayerOne.MouseY=parseInt(information[2])\r\n        }\r\n      });\r\n    };\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id='container'\r\n        style={{\r\n          position: 'absolute',\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n          bottom: 0,\r\n          right: 0,\r\n          zIndex: 1,\r\n          width: 640,\r\n          height: 480\r\n        }}\r\n      ></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DrawPlayerOne\r\n","import React, { useState,useEffect } from 'react'\r\nimport Phaser from 'phaser'\r\nimport bigNose from '../image/nose.png'\r\n\r\nconst DrawPlayerTwo = () => {\r\n\r\n  useEffect(() => {\r\n    UsingWebSocket()\r\n    new Phaser.Game({\r\n      type: Phaser.AUTO,\r\n      width: 640,\r\n      height: 480,\r\n      backgroundColor: '#fff',\r\n      transparent: true,\r\n      physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n          debug: true\r\n        }\r\n      },\r\n      scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n      },\r\n      parent: 'container'\r\n    })\r\n  }, [])\r\n  //Player Mouse\r\n  const PlayerInformation = {\r\n    PlayerTwo: {\r\n      MouseX: 800,\r\n      MouseY: 400,\r\n      isDetct:false,\r\n    },\r\n    PlayerMouseEasing: 0.1\r\n  }\r\n\r\n  let nose\r\n\r\n  function preload () {\r\n    this.load.image('nose', bigNose)\r\n  }\r\n  function create () {\r\n    nose = this.add\r\n      .image(0, 0, 'nose')\r\n      .setPosition(0, 0)\r\n      .setScale(0.02, 0.02)\r\n      .setVisible(false)\r\n  }\r\n\r\n  function update () {\r\n    if(PlayerInformation.PlayerTwo.isDetct){\r\n      nose.setPosition(PlayerInformation.PlayerTwo.MouseX, PlayerInformation.PlayerTwo.MouseY - 10).setVisible(true)\r\n    }\r\n  }\r\n\r\n  function UsingWebSocket () {\r\n   let socket = new WebSocket(\"ws://localhost:3000\");\r\n    socket.onmessage = (event) => {\r\n      event.data.text().then(async(txt) => {\r\n        let information = txt.split(\",\");\r\n        if (information[0] === \"two\") {\r\n          PlayerInformation.PlayerTwo.isDetct=true\r\n          PlayerInformation.PlayerTwo.MouseX=parseInt(information[1])\r\n          PlayerInformation.PlayerTwo.MouseY=parseInt(information[2])\r\n        }\r\n      });\r\n    };\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id='container'\r\n        style={{\r\n          position: 'absolute',\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n          bottom: 0,\r\n          left: 0,\r\n          zIndex: 1,\r\n          width: 640,\r\n          height: 480\r\n        }}\r\n      ></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DrawPlayerTwo\r\n","import React, { useRef, useEffect, useState, useCallback } from 'react'\r\n\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport Webcam from 'react-webcam'\r\nimport * as blazeface from '@tensorflow-models/blazeface'\r\nimport DrawPlayerOne from './PlayerOne'\r\nimport DrawPlayerTwo from './PlayerTwo'\r\n\r\nconst Face = ({ player }) => {\r\n  const socket = new WebSocket(\"ws://localhost:3000\");\r\n  const webcamRef = useRef(null)\r\n  const returnTensors = false\r\n  const [devices, setDevices] = useState([])\r\n\r\n  const runFacedetection = async () => {\r\n    const model = await blazeface.load()\r\n    setInterval(() => {\r\n      detect(model)\r\n    }, 100)\r\n  }\r\n\r\n  const detect = async model => {\r\n    if (\r\n      typeof webcamRef.current !== 'undefined' &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get video properties\r\n      const video = webcamRef.current.video\r\n      const videoWidth = webcamRef.current.video.videoWidth\r\n      const videoHeight = webcamRef.current.video.videoHeight\r\n\r\n      //Set video height and width\r\n      webcamRef.current.video.width = videoWidth\r\n      webcamRef.current.video.height = videoHeight\r\n\r\n      const prediction = await model.estimateFaces(video, returnTensors)\r\n      if(prediction.length>0){\r\n        socket.send([\r\n          player,\r\n          parseInt(prediction[0].landmarks[2][0]),\r\n          parseInt(prediction[0].landmarks[2][1]),\r\n          ]);\r\n      }\r\n      // topLeft: [232.28, 145.26],\r\n      //     bottomRight: [449.75, 308.36],\r\n      //     probability: [0.998],\r\n      //     landmarks: [\r\n      //       [295.13, 177.64], // right eye\r\n      //       [382.32, 175.56], // left eye\r\n      //       [341.18, 205.03], // nose\r\n      //       [345.12, 250.61], // mouth\r\n      //       [252.76, 211.37], // right ear\r\n      //       [431.20, 204.93] // left ear\r\n      //      ]\r\n    }\r\n  }\r\n\r\n  runFacedetection()\r\n\r\n  const handleDevices = useCallback(\r\n    mediaDevices =>\r\n      setDevices(mediaDevices.filter(({ kind }) => kind === 'videoinput')),\r\n    [setDevices]\r\n  )\r\n\r\n    useEffect(() => {\r\n    navigator.mediaDevices.enumerateDevices().then(handleDevices)\r\n\r\n  }, [])\r\n  return (\r\n    <div>\r\n      {devices.map(() => (\r\n        <div>\r\n          <Webcam\r\n            ref={webcamRef}\r\n            videoConstraints={{ deviceId: devices[0].deviceId }}\r\n            mirrored={false}\r\n            style={{\r\n              position: 'absolute',\r\n              marginLeft: 'auto',\r\n              marginRight: 'auto',\r\n              bottom: 0,\r\n              right: 0,\r\n              zIndex: 0,\r\n              width: 640,\r\n              height: 480\r\n            }}\r\n            \r\n          />\r\n          <DrawPlayerOne/>\r\n          <Webcam\r\n            ref={webcamRef}\r\n            videoConstraints={{ deviceId: devices[1].deviceId }}\r\n            mirrored={false}\r\n            style={{\r\n              position: 'absolute',\r\n              marginLeft: 'auto',\r\n              marginRight: 'auto',\r\n              bottom: 0,\r\n              left: 0,\r\n              zIndex: 0,\r\n              width: 640,\r\n              height: 480\r\n            }}\r\n          />\r\n           <DrawPlayerTwo/>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Face\r\n","import React, { useRef, useEffect, useState, useCallback } from 'react'\r\n\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport Webcam from 'react-webcam'\r\nimport * as blazeface from '@tensorflow-models/blazeface'\r\nimport DrawPlayerOne from './PlayerOne'\r\n\r\nconst DetectPlayerOne = ({ player }) => {\r\n  const socket = new WebSocket(\"ws://localhost:3000\");\r\n  const webcamRef = useRef(null)\r\n  const returnTensors = false\r\n  const [devices, setDevices] = useState([])\r\n\r\n  const runFacedetection = async () => {\r\n    const model = await blazeface.load()\r\n    setInterval(() => {\r\n      detect(model)\r\n    }, 100)\r\n  }\r\n\r\n  const detect = async model => {\r\n    if (\r\n      typeof webcamRef.current !== 'undefined' &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get video properties\r\n      const video = webcamRef.current.video\r\n      const videoWidth = webcamRef.current.video.videoWidth\r\n      const videoHeight = webcamRef.current.video.videoHeight\r\n\r\n      //Set video height and width\r\n      webcamRef.current.video.width = videoWidth\r\n      webcamRef.current.video.height = videoHeight\r\n\r\n      const prediction = await model.estimateFaces(video, returnTensors)\r\n      if(prediction.length>0){\r\n        socket.send([\r\n          player,\r\n          parseInt(prediction[0].landmarks[2][0]),\r\n          parseInt(prediction[0].landmarks[2][1]),\r\n          ]);\r\n      }\r\n      // topLeft: [232.28, 145.26],\r\n      //     bottomRight: [449.75, 308.36],\r\n      //     probability: [0.998],\r\n      //     landmarks: [\r\n      //       [295.13, 177.64], // right eye\r\n      //       [382.32, 175.56], // left eye\r\n      //       [341.18, 205.03], // nose\r\n      //       [345.12, 250.61], // mouth\r\n      //       [252.76, 211.37], // right ear\r\n      //       [431.20, 204.93] // left ear\r\n      //      ]\r\n    }\r\n  }\r\n\r\n  runFacedetection()\r\n\r\n  const handleDevices = useCallback(\r\n    mediaDevices =>\r\n      setDevices(mediaDevices.filter(({ kind }) => kind === 'videoinput')),\r\n    [setDevices]\r\n  )\r\n\r\n    useEffect(() => {\r\n    navigator.mediaDevices.enumerateDevices().then(handleDevices)\r\n\r\n  }, [])\r\n  return (\r\n    <div>\r\n      {devices.map(() => (\r\n        <div>\r\n          <Webcam\r\n            ref={webcamRef}\r\n            videoConstraints={{ deviceId: devices[0].deviceId }}\r\n            mirrored={false}\r\n            style={{\r\n              position: 'absolute',\r\n              marginLeft: 'auto',\r\n              marginRight: 'auto',\r\n              bottom: 0,\r\n              right: 0,\r\n              zIndex: 0,\r\n              width: 640,\r\n              height: 480\r\n            }}\r\n          />\r\n          <DrawPlayerOne/>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DetectPlayerOne\r\n","import React, { useRef, useEffect, useState, useCallback } from 'react'\r\n\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport Webcam from 'react-webcam'\r\nimport * as blazeface from '@tensorflow-models/blazeface'\r\nimport DrawPlayerTwo from './PlayerTwo'\r\n\r\nconst Face = ({ player }) => {\r\n  const socket = new WebSocket(\"ws://localhost:3000\");\r\n  const webcamRef = useRef(null)\r\n  const returnTensors = false\r\n  const [devices, setDevices] = useState([])\r\n\r\n  const runFacedetection = async () => {\r\n    const model = await blazeface.load()\r\n    setInterval(() => {\r\n      detect(model)\r\n    }, 100)\r\n  }\r\n\r\n  const detect = async model => {\r\n    if (\r\n      typeof webcamRef.current !== 'undefined' &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get video properties\r\n      const video = webcamRef.current.video\r\n      const videoWidth = webcamRef.current.video.videoWidth\r\n      const videoHeight = webcamRef.current.video.videoHeight\r\n\r\n      //Set video height and width\r\n      webcamRef.current.video.width = videoWidth\r\n      webcamRef.current.video.height = videoHeight\r\n\r\n      const prediction = await model.estimateFaces(video, returnTensors)\r\n      if(prediction.length>0){\r\n        socket.send([\r\n          player,\r\n          parseInt(prediction[0].landmarks[2][0]),\r\n          parseInt(prediction[0].landmarks[2][1]),\r\n          ]);\r\n      }\r\n      // topLeft: [232.28, 145.26],\r\n      //     bottomRight: [449.75, 308.36],\r\n      //     probability: [0.998],\r\n      //     landmarks: [\r\n      //       [295.13, 177.64], // right eye\r\n      //       [382.32, 175.56], // left eye\r\n      //       [341.18, 205.03], // nose\r\n      //       [345.12, 250.61], // mouth\r\n      //       [252.76, 211.37], // right ear\r\n      //       [431.20, 204.93] // left ear\r\n      //      ]\r\n    }\r\n  }\r\n\r\n  runFacedetection()\r\n\r\n  const handleDevices = useCallback(\r\n    mediaDevices =>\r\n      setDevices(mediaDevices.filter(({ kind }) => kind === 'videoinput')),\r\n    [setDevices]\r\n  )\r\n\r\n    useEffect(() => {\r\n    navigator.mediaDevices.enumerateDevices().then(handleDevices)\r\n\r\n  }, [])\r\n  return (\r\n    <div>\r\n      {devices.map(() => (\r\n        <div>\r\n          <Webcam\r\n            ref={webcamRef}\r\n            videoConstraints={{ deviceId: devices[1].deviceId }}\r\n            mirrored={false}\r\n            style={{\r\n              position: 'absolute',\r\n              marginLeft: 'auto',\r\n              marginRight: 'auto',\r\n              bottom: 0,\r\n              left: 0,\r\n              zIndex: 0,\r\n              width: 640,\r\n              height: 480\r\n            }}\r\n          />\r\n           <DrawPlayerTwo/>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Face\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Face from \"./view/Face\";\r\nimport DetectPlayerOne from './view/DetectPlayerOne';\r\nimport DetectPlayerTwo from './view/DetectPlayerTwo';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Routes key={uuidv4()}>\r\n        <Route path=\"/\" element={<Face />} />\r\n        <Route path=\"/playerone\" element={<DetectPlayerOne player={\"one\"} />}></Route>\r\n        <Route path=\"/playertwo\" element={<DetectPlayerTwo player={\"two\"} />}></Route>\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './view/reportWebVitals'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}